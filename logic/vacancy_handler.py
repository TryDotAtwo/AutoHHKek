import asyncio
import random
import re
from typing import Dict, Any
from playwright.async_api import Page, BrowserContext, TimeoutError as PlaywrightTimeoutError
from playwright._impl._errors import Error as PlaywrightError

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π (–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ main)
from logic.llm_handler import robust_llm_query

def debug_print(message: str, debug_mode: bool):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ."""
    if debug_mode:
        print(message)

async def handle_captcha(page: Page, debug_mode: bool, title: str = "") -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CAPTCHA: –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–π—Ç–∏ –µ—ë –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ."""
    print(f"üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CAPTCHA –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ '{title}'! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Ç–∫—Ä—ã—Ç—ã–π –±—Ä–∞—É–∑–µ—Ä, –ø—Ä–æ–π–¥–∏—Ç–µ CAPTCHA –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, input)
    print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ CAPTCHA –ø—Ä–æ–π–¥–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        await page.wait_for_selector("text=–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç", timeout=2000)
        print("CAPTCHA –≤—Å—ë –µ—â—ë –≤–∏–¥–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter.")
        await loop.run_in_executor(None, input)
    except PlaywrightTimeoutError:
        pass  # CAPTCHA –ø—Ä–æ–π–¥–µ–Ω–∞, –æ–∫
    return True

async def safe_page_operation(page: Page, operation: callable, *args, **kwargs) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å page: check closed –∏ catch errors."""
    try:
        if page.is_closed():
            raise PlaywrightError("Page is closed")
        return await operation(*args, **kwargs)
    except (PlaywrightError, PlaywrightTimeoutError) as e:
        debug_print(f"‚ùå Page error in operation: {e}", debug_mode=True)
        return None

async def parse_vacancy_description(page: Page, title: str, debug_mode: bool) -> str:
    """–ü–∞—Ä—Å–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–∞—Ä—Å–∏–Ω–≥—É —Ä–µ–∑—é–º–µ: –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ—á–∏—Å—Ç–∫–∞."""
    debug_print("üìÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏...", debug_mode)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CAPTCHA (–±–µ–∑ safe_page_operation, –ø—Ä—è–º–æ–π try-except, —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç)
    debug_print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º CAPTCHA...", debug_mode)
    try:
        await page.wait_for_selector("text=–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç", timeout=2000)
        await handle_captcha(page, title, debug_mode)
    except PlaywrightTimeoutError:
        pass  # –ù–µ—Ç CAPTCHA, –æ–∫
    debug_print("‚úÖ CAPTCHA check done.", debug_mode)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø—Ä—è–º–æ–π try-except, –±–µ–∑ safe, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å hidden spam)
    debug_print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...", debug_mode)
    try:
        await page.wait_for_selector("text=–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", timeout=10000)
        debug_print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.'", debug_mode)
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Ä–µ–ª–æ–∞–¥–∏–º —Å—Ä–∞–∑—É
        await page.reload(wait_until="domcontentloaded", timeout=45000)
    except PlaywrightTimeoutError:
        pass  # –ù–µ—Ç –æ—à–∏–±–∫–∏, –æ–∫
    debug_print("‚úÖ Error check done.", debug_mode)
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (—Å safe)
    debug_print("üîÑ –†–µ–ª–æ–∞–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞...", debug_mode)
    reload_result = await safe_page_operation(page, page.reload, wait_until="domcontentloaded", timeout=45000)
    if reload_result is None:
        debug_print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç —Ä–µ–ª–æ–∞–¥–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π.", debug_mode)
        await page.wait_for_timeout(5000)
    debug_print("‚úÖ Reload done.", debug_mode)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π)
    debug_print("üìñ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...", debug_mode)
    full_raw_text = await safe_page_operation(page, page.inner_text, "body")
    if full_raw_text is None:
        debug_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç, fallback.", debug_mode)
        return ""  # Fallback –µ—Å–ª–∏ page closed
    
    debug_print(f"üìÑ –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω ({len(full_raw_text)} —Å–∏–º–≤–æ–ª–æ–≤). –û—á–∏—â–∞–µ–º...", debug_mode)
    
    # –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é" –∏ –≤—ã—à–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ title –∏–∑–≤–µ—Å—Ç–µ–Ω)
    title_start = full_raw_text.find(title)
    if title_start == -1:
        # Fallback: –∏—â–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
        title_match = re.search(r'class="vacancy-title".*?>([^<]+)<', full_raw_text, re.DOTALL | re.IGNORECASE)
        if title_match:
            title_start = title_match.start()
        else:
            title_start = 0  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä—ë–º —Å –Ω–∞—á–∞–ª–∞
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é"
    question_start = full_raw_text.find("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é")
    if question_start != -1:
        full_raw_text = full_raw_text[:question_start]
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ/–æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if title_start > 0:
        full_raw_text = full_raw_text[title_start:]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º cookie –±–∞–Ω–Ω–µ—Ä—ã, —á–∞—Ç—ã –∏ —Ç.–¥. (–ø—Ä–æ—Å—Ç–æ–π regex)
    unwanted_patterns = [
        r'–ú—ã\s+–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã cookie.*?–ü–æ–Ω—è—Ç–Ω–æ',
        r'–ß–∞—Ç—ã.*?–ü–æ–∏—Å–∫',
        r'^\s*$\n'  # –õ–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    ]
    for pattern in unwanted_patterns:
        full_raw_text = re.sub(pattern, '', full_raw_text, flags=re.DOTALL | re.MULTILINE)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã
    full_raw_text = re.sub(r'\n\s*\n', '\n', full_raw_text.strip())
    
    debug_print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ ({len(full_raw_text)} —Å–∏–º–≤–æ–ª–æ–≤).", debug_mode)
    return full_raw_text

async def process_vacancy(
    vacancy: Dict[str, str], 
    context: BrowserContext, 
    user_profile: str, 
    user_wishes: str, 
    prompts: Dict[str, str], 
    relevance_threshold: int, 
    debug_mode: bool
) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –≤–∞–∫–∞–Ω—Å–∏—é: LLM-–æ—Ü–µ–Ω–∫–∞ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –æ—Ç–∫–ª–∏–∫ –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç."""
    title = vacancy["title"]
    url = vacancy["url"]
    debug_print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞–∫–∞–Ω—Å–∏–∏: '{title}' (URL: {url})", debug_mode)
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    debug_print("‚è≥ –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π (1-3s)...", debug_mode)
    await asyncio.sleep(random.uniform(1, 3))
    debug_print("‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ done.", debug_mode)
    
    page = await context.new_page()
    await page.set_extra_http_headers({
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    })
    debug_print("üÜï –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞.", debug_mode)
    
    # Retry –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—É–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞)
    max_retries = 3
    loaded = False
    for attempt in range(max_retries):
        debug_print(f"üì• –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ '{title}', –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}", debug_mode)
        try:
            await page.goto(url, wait_until="domcontentloaded", timeout=30000)  # Reduced to 30s
            debug_print("‚úÖ Goto completed.", debug_mode)
            # –£–±—Ä–∞–ª–∏ wait_for_load_state("networkidle")
            loaded = True
            break
        except (PlaywrightTimeoutError, PlaywrightError) as e:
            debug_print(f"‚ùå –¢–∞–π–º–∞—É—Ç/–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ '{title}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}", debug_mode)
            if attempt < max_retries - 1:
                await page.reload(wait_until="domcontentloaded", timeout=30000)
                await asyncio.sleep(random.uniform(5, 8))
            else:
                debug_print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å '{title}', —Å–∫–∏–ø", debug_mode)
                await page.close()
                return {"title": title, "status": "load_failed"}
    
    if not loaded:
        await page.close()
        return {"title": title, "status": "load_failed"}
    
    # CAPTCHA (–ø—Ä—è–º–æ–π try-except, —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç)
    debug_print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º CAPTCHA...", debug_mode)
    try:
        await page.wait_for_selector("text=–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç", timeout=2000)
        print(f"üîí CAPTCHA –¥–ª—è '{title}'! –ü—Ä–æ–π–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é...")
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, input)
        debug_print("‚úÖ CAPTCHA –ø—Ä–æ–π–¥–µ–Ω–∞.", debug_mode)
    except PlaywrightTimeoutError:
        debug_print("‚úÖ –ù–µ—Ç CAPTCHA.", debug_mode)
    debug_print("‚úÖ CAPTCHA check done.", debug_mode)
    
    # –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è
    debug_print("‚è≥ –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ (3-5s)...", debug_mode)
    await asyncio.sleep(random.uniform(3, 5))
    debug_print("‚úÖ –ß—Ç–µ–Ω–∏–µ done.", debug_mode)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç–æ–≥–æ
    debug_print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç–æ...", debug_mode)
    try:
        success_elem = await page.query_selector("div[data-qa='success-response']")
        if success_elem:
            debug_print(f"‚ÑπÔ∏è –£–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç–æ –Ω–∞ '{title}', —Å–∫–∏–ø", debug_mode)
            await page.close()
            return {"title": title, "status": "already_applied"}
        debug_print("‚úÖ –ù–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç–æ —Ä–∞–Ω–µ–µ.", debug_mode)
    except Exception as e:
        debug_print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç–æ–≥–æ: {e}", debug_mode)
    debug_print("‚úÖ Already applied check done.", debug_mode)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ (—É–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω print)
    apply_selector = "a[data-qa='vacancy-response-link-top']"
    debug_print(f"üîç –ñ–¥—ë–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª–∏–∫–∞: '{apply_selector}' (timeout 10s)...", debug_mode)
    try:
        apply_elem = await page.wait_for_selector(apply_selector, timeout=10000)  # Reduced for test
        debug_print(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è '{title}'.", debug_mode)
    except PlaywrightTimeoutError:
        # Try alternative selector if main fails
        alt_selectors = [
            "button[data-qa='vacancy-response-button']",
            "a[data-qa='vacancy-response-link']",
            "button:has-text('–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è')"
        ]
        found = False
        for alt_sel in alt_selectors:
            debug_print(f"üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: '{alt_sel}'", debug_mode)
            try:
                apply_elem = await page.wait_for_selector(alt_sel, timeout=5000)
                apply_selector = alt_sel  # Update for later click
                debug_print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: '{alt_sel}'", debug_mode)
                found = True
                break
            except PlaywrightTimeoutError:
                continue
        if not found:
            debug_print(f"‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è '{title}' –Ω–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É, –Ω–∏ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º.", debug_mode)
            await page.close()
            return {"title": title, "status": "no_apply_button"}
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è
    debug_print("üìÑ –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ...", debug_mode)
    description = await parse_vacancy_description(page, title, debug_mode)
    if not description:
        debug_print(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è failed –¥–ª—è '{title}'", debug_mode)
        await page.close()
        return {"title": title, "status": "parse_failed"}
    debug_print(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ ({len(description)} —Å–∏–º–≤–æ–ª–æ–≤)", debug_mode)
    
    # LLM —Å retry (–¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫)
    debug_print("ü§ñ –ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM...", debug_mode)
    system_prompt = "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø–∏—Å—å–º–∞–º. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON."
    user_prompt = prompts["process"].format(profile=user_profile, user_wishes=user_wishes, title=title, description=description)
    llm_result = None
    max_llm_retries = 3
    for llm_attempt in range(max_llm_retries):
        debug_print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ LLM –¥–ª—è '{title}' (–ø–æ–ø—ã—Ç–∫–∞ {llm_attempt + 1}/{max_llm_retries})...", debug_mode)
        llm_response = await robust_llm_query(system_prompt, user_prompt)
        debug_print(f"üì• LLM –æ—Ç–≤–µ—Ç: {llm_response}", debug_mode)
        
        if isinstance(llm_response, tuple) and len(llm_response) == 3:
            llm_result, model_name, provider_name = llm_response
        else:
            llm_result = llm_response
            model_name = "command-a-03-2025"
            provider_name = "CohereForAI_C4AI_Command"
        
        if llm_result and isinstance(llm_result, dict):
            debug_print("‚úÖ LLM —É—Å–ø–µ—Ö.", debug_mode)
            break
        else:
            debug_print(f"‚ö†Ô∏è LLM failed (–ø–æ–ø—ã—Ç–∫–∞ {llm_attempt + 1}), retry...", debug_mode)
            await asyncio.sleep(10)  # Sleep –ø–µ—Ä–µ–¥ retry
    
    if not (llm_result and isinstance(llm_result, dict)):
        debug_print(f"ü§ñ –û—à–∏–±–∫–∞ LLM –¥–ª—è '{title}': {llm_result}, —Å–∫–∏–ø", debug_mode)
        await page.close()
        return {"title": title, "llm_result": llm_result, "status": "llm_failed"}
    
    relevance_str = llm_result.get("relevance", "0")
    # Fixed parsing: handle float scores like '8.5'
    try:
        if isinstance(relevance_str, str):
            score_part = relevance_str.split(':')[-1].strip()
            relevance_score = int(round(float(score_part)))
        else:
            relevance_score = int(relevance_str or 0)
    except (ValueError, IndexError):
        relevance_score = 0  # Fallback if parsing fails
    apply_decision = llm_result.get("apply", "").lower().strip()
    letter = llm_result.get("letter", "")
    
    debug_print(f"üìä LLM: relevance={relevance_score}, apply='{apply_decision}', letter_len={len(letter)}", debug_mode)
    
    # Disclaimer
    disclaimer = f'\n\n–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ë–æ–ª—å—à–æ–π –Ø–∑—ã–∫–æ–≤–æ–π –ú–æ–¥–µ–ª–∏ "{model_name}" –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ "{provider_name}" –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–±–ª–∏–æ—Ç–µ–∫—É g4f. –≠—Ç–∞ –∂–µ –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–µ–∑—é–º–µ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è. –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ hh.ru –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ https://github.com/TryDotAtwo/AutoHHKek'
    letter += disclaimer
    
    if relevance_score >= relevance_threshold and apply_decision in ["–¥–∞", "yes"] and letter.strip():
        debug_print(f"üéØ '{title}' —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ (score: {relevance_score}), –æ—Ç–∫–ª–∏–∫–∞–µ–º—Å—è...", debug_mode)

        try:
            # –ö–ª–∏–∫ –æ—Ç–∫–ª–∏–∫–∞ (—É–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç)
            debug_print(f"üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–∫–ª–∏–∫–∞: '{apply_selector}'", debug_mode)
            await page.click(apply_selector, force=True, timeout=10000)
            debug_print("‚úÖ Click done.", debug_mode)
            # –£–±—Ä–∞–ª–∏ wait_for_load_state("networkidle")
            await asyncio.sleep(2)  # –ö–æ—Ä–æ—Ç–∫–∏–π sleep –≤–º–µ—Å—Ç–æ networkidle
            debug_print("‚úÖ Sleep after click done.", debug_mode)
            await asyncio.sleep(5)  # –î–æ–ø. sleep –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            if debug_mode:
                print(f"üîò –ö–ª–∏–∫ –ø–æ –æ—Ç–∫–ª–∏–∫—É —É—Å–ø–µ—à–µ–Ω –¥–ª—è '{title}'")
            
            # –®–∞–≥ 1: –ñ–¥—ë–º –±–∞–∑–æ–≤—ã–π —É—Å–ø–µ—Ö ("–†–µ–∑—é–º–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" + —á–∞—Ç) ‚Äî —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
            debug_print("üîç –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è '–†–µ–∑—é–º–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'...", debug_mode)
            base_selectors = [
                "text=–†–µ–∑—é–º–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
                ".magritte-text_style-primary.magritte-text_typography-title-4-semibold:has-text('–†–µ–∑—é–º–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')",
                "div[data-qa='success-response']"
            ]
            base_success = False
            for sel in base_selectors:
                debug_print(f"  - –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: '{sel}'", debug_mode)
                try:
                    await page.wait_for_selector(sel, timeout=10000)  # Reduced
                    base_success = True
                    if debug_mode:
                        print(f"‚úÖ '–†–µ–∑—é–º–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è '{title}'")
                    break
                except PlaywrightTimeoutError:
                    continue
            
            if not base_success:
                print(f"‚ùå '–†–µ–∑—é–º–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è '{title}'")
                await page.close()
                return {"title": title, "status": "no_base_success"}
            
            debug_print("üîç –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–∞—Ç–∞...", debug_mode)
            chat_selectors = [
                "text=–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º –º–æ–∂–Ω–æ –≤ —á–∞—Ç–µ",
                ".magritte-text_style-secondary.magritte-text_typography-paragraph-2-regular:has-text('–°–≤—è–∑–∞—Ç—å—Å—è —Å&nbsp;—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º –º–æ–∂–Ω–æ –≤&nbsp;—á–∞—Ç–µ')"
            ]
            chat_success = False
            for sel in chat_selectors:
                debug_print(f"  - –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: '{sel}'", debug_mode)
                try:
                    await page.wait_for_selector(sel, timeout=10000)
                    chat_success = True
                    if debug_mode:
                        print(f"‚úÖ –ß–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è '{title}'")
                    break
                except PlaywrightTimeoutError:
                    continue
            
            if not chat_success:
                print(f"‚ùå –ß–∞—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è '{title}'")
                await page.close()
                return {"title": title, "status": "no_chat_success"}
            
            if debug_mode:
                print(f"üì§ –†–µ–∑—é–º–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è '{title}'! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ...")
            await asyncio.sleep(3)  # Sleep –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–æ–π
            
            # –®–∞–≥ 2: –ñ–¥—ë–º —Ñ–æ—Ä–º—É –ø–∏—Å—å–º–∞ (—É–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç)
            debug_print("üìù –ñ–¥—ë–º —Ñ–æ—Ä–º—É –ø–∏—Å—å–º–∞...", debug_mode)
            form_selector = "textarea[name='text']"
            await page.wait_for_selector(form_selector, timeout=10000)
            if debug_mode:
                print(f"üìù –§–æ—Ä–º–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –¥–ª—è '{title}'")
            await asyncio.sleep(2)
            
            # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É (–∏–∑ HTML: aria-invalid)
            debug_print("üßπ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ...", debug_mode)
            await page.evaluate("""
                const textarea = document.querySelector('textarea[name="text"]');
                if (textarea) {
                    textarea.value = '';
                    textarea.setAttribute('aria-invalid', 'false');
                }
                const error = document.querySelector('.magritte-form-helper-error');
                if (error) error.remove();
            """)
            await asyncio.sleep(2)
            debug_print("‚úÖ –û—á–∏—Å—Ç–∫–∞ done.", debug_mode)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º
            debug_print("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∏—Å—å–º–æ...", debug_mode)
            message_field = page.locator(form_selector)
            await message_field.focus()
            await message_field.fill(letter)
            await asyncio.sleep(random.uniform(3, 5))  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
            if debug_mode:
                print(f"‚úèÔ∏è –ü–∏—Å—å–º–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è '{title}'")
            debug_print("‚úÖ Fill done.", debug_mode)
            
            # –®–∞–≥ 3: Submit (—É–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç)
            debug_print("üì§ –ñ–¥—ë–º –∏ –∫–ª–∏–∫–∞–µ–º submit...", debug_mode)
            submit_selector = "button[data-qa='vacancy-response-letter-submit']"
            submit_btn = await page.wait_for_selector(submit_selector, timeout=10000)
            await submit_btn.click()
            debug_print("‚úÖ Submit click done.", debug_mode)
            # –£–±—Ä–∞–ª–∏ wait_for_load_state("networkidle")
            await asyncio.sleep(2)  # –ö–æ—Ä–æ—Ç–∫–∏–π sleep –≤–º–µ—Å—Ç–æ networkidle
            await asyncio.sleep(5)  # –î–æ–ø. sleep –ø–æ—Å–ª–µ submit
            if debug_mode:
                print(f"üì§ Submit –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è '{title}'")
            
            # –®–∞–≥ 4: –ñ–¥—ë–º —É—Å–ø–µ—Ö –ø–∏—Å—å–º–∞ ("–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ") ‚Äî —É–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç
            debug_print("üîç –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞...", debug_mode)
            letter_success_selectors = [
                "text=–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                ".magritte-text_style-primary.magritte-text_typography-label-3-regular:has-text('–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')"
            ]
            letter_success = False
            for sel in letter_success_selectors:
                debug_print(f"  - –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: '{sel}'", debug_mode)
                try:
                    await page.wait_for_selector(sel, timeout=10000)
                    letter_success = True
                    if debug_mode:
                        print(f"‚úÖ '–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è '{title}'")
                    break
                except PlaywrightTimeoutError:
                    continue
            
            if letter_success:
                if debug_mode:
                    print(f"üéâ ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–∫–ª–∏–∫ —Å –ø–∏—Å—å–º–æ–º –Ω–∞ '{title}'!")
                await page.close()
                result = {"title": title, "status": "letter_sent"}
                if not debug_mode:
                    print(f"üéØ –û—Ç–∫–ª–∏–∫ —Å –ø–∏—Å—å–º–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ '{title}'")
                return result
            else:
                print(f"‚ùå –ü–∏—Å—å–º–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è '{title}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é.")
                await page.close()
                result = {"title": title, "status": "letter_failed"}
                if not debug_mode:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è '{title}'")
                return result

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ '{title}': {e}")
            debug_print(f"üí• –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", debug_mode)
            await page.close()
            result = {"title": title, "status": "error"}
            if not debug_mode:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ '{title}'")
            return result

    else:
        debug_print(f"‚è≠Ô∏è '{title}' –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ (score: {relevance_score}, apply: {apply_decision}), —Å–∫–∏–ø", debug_mode)
        result = {"title": title, "llm_result": llm_result, "status": "processed"}
        if not debug_mode:
            print(f"‚è≠Ô∏è –í–∞–∫–∞–Ω—Å–∏—è '{title}' –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è)")
        return result
    
    await page.close()
    debug_print(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ '{title}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", debug_mode)
    return result
