import subprocess
import sys
import random
import asyncio
import concurrent.futures
import os
import json
import re
from tqdm import tqdm
import argparse  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

def install_and_import(package):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ."""
    try:
        __import__(package.replace('-', '_'))  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –±–µ–∑ –¥–µ—Ñ–∏—Å–∞
    except ImportError:
        pip_package = package  # –î–ª—è pip —Å –¥–µ—Ñ–∏—Å–æ–º, –µ—Å–ª–∏ package –∏–º–µ–µ—Ç –¥–µ—Ñ–∏—Å
        print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {pip_package}...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", pip_package])
        __import__(package.replace('-', '_'))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
install_and_import("playwright")
subprocess.check_call(["playwright", "install"])  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã –¥–ª—è Playwright

install_and_import("requests")
install_and_import("g4f")
install_and_import("playwright-stealth")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å –¥–µ—Ñ–∏—Å–æ–º –¥–ª—è pip
install_and_import("tqdm")

# –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import time
from logic.login import setup_browser_and_login
from logic.resume_parser import parse_resume
from logic.vacancy_parser import search_vacancies
from logic.vacancy_handler import process_vacancy  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç (—Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π letter –∏ relevance)
from logic.llm_handler import robust_llm_query  # –î–ª—è LLM (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ main)
from playwright.async_api import async_playwright, Page, BrowserContext, TimeoutError as PlaywrightTimeoutError
from playwright._impl._errors import Error as PlaywrightError  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ closed errors
from playwright_stealth import Stealth  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Stealth –∫–ª–∞—Å—Å –¥–ª—è async
from typing import Dict, Any, Tuple

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
RESUME_ID = "[–í–∞—à ID —Ä–µ–∑—é–º–µ]"  # –í–∞—à ID —Ä–µ–∑—é–º–µ
USER_WISHES = "[–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è]"  # –ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_PROFILE = ""  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π)
TEST_CONFIG = {
    "test_profile": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ LLM: –æ–ø—ã—Ç 2+ –≥–æ–¥–∞ –≤ NLP, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤, –ø—Ä–æ–º–ø—Ç–∏–Ω–≥",
    "test_vacancy_title": "[–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏]",
    "test_vacancy_url": "[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é]",
    "test_vacancy_description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ ML. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç –≤ LLM –∏ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–µ. –í–∫–ª—é—á–∏—Ç–µ –≤ –ø–∏—Å—å–º–æ —Ñ—Ä–∞–∑—É '–Ø –≥–æ—Ç–æ–≤ –∫ –≤—ã–∑–æ–≤–∞–º'.",
    "test_llm_response": {
        "relevance": "–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (0-10): 8",
        "apply": "–î–∞",
        "letter": "–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏!"
    },
    "test_letter_text": """–¢–µ—Å—Ç""",
    "test_relevance_score": 8,
    "test_apply_decision": "–¥–∞",
    "test_model_name": "command-a-03-2025",
    "test_provider_name": "CohereForAI_C4AI_Command",
    "test_disclaimer": '\n\n–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ë–æ–ª—å—à–æ–π –Ø–∑—ã–∫–æ–≤–æ–π –ú–æ–¥–µ–ª–∏ "{model_name}" –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ "{provider_name}" –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–±–ª–∏–æ—Ç–µ–∫—É g4f. –≠—Ç–∞ –∂–µ –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–µ–∑—é–º–µ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è. –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ hh.ru –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ https://github.com/TryDotAtwo/AutoHHKek'
}

PROMPTS = {
    "process": """
    –ù–∞ –æ—Å–Ω–æ–≤–µ –º–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {profile}

    –ú–æ—ë –∏–º—è: [–í–∞—à–µ –∏–º—è]

    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è, –Ω–æ –ù–ï –≤–∫–ª—é—á–∞–π –∏—Ö –≤ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ): {user_wishes}

    –í–∞–∫–∞–Ω—Å–∏—è: {title}
    –û–ø–∏—Å–∞–Ω–∏–µ: {description}

    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
    1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏.
    2. –û–ø—Ä–µ–¥–µ–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10, —É—á–∏—Ç—ã–≤–∞—è –º–æ–π –æ–ø—ã—Ç, –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è.
    3. –ü—Ä–∏–º–∏ —Ä–µ—à–µ–Ω–∏–µ, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è (¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª). –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –Ω–æ –Ω–µ –¥–æ–ª–∂–Ω—ã —É–ø–æ–º–∏–Ω–∞—Ç—å—Å—è –≤ –ø–∏—Å—å–º–µ.
    4. –ï—Å–ª–∏ –∫–∞–∫–∞—è-–ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –º–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ, –Ω–µ –¥—É–±–ª–∏—Ä—É–π –µ—ë –≤ –ø–∏—Å—å–º–µ.
    5. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –µ—Å—Ç—å –ø—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –≤–∫–ª—é—á–∏—Ç—å –≤ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, —Ñ—Ä–∞–∑—É –∏–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ —ç—Ç–æ –¥–æ—Å–ª–æ–≤–Ω–æ.
    6. –°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –º–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –±–µ–Ω—á–º–∞—Ä–∫–∏, –ø—Ä–µ–ø—Ä–∏–Ω—Ç—ã), —á—Ç–æ–±—ã –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –º–æ–π –æ–ø—ã—Ç –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
    7. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ, —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ (1‚Äì2 –∞–±–∑–∞—Ü–∞, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ), –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç –º–æ—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é, –æ–ø—ã—Ç –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é. –û–±—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º, –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ –æ—Ñ–∏—Ü–∏–æ–∑–∞.
    8. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Ñ–æ—Ä–º–∞—Ç–∞ JSON. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, Markdown –∏–ª–∏ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π.

    –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
    {{
        "relevance": "–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (0-10): ",
        "apply": "–î–∞/–ù–µ—Ç - —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è?",
        "letter": "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ (1‚Äì2 –∞–±–∑–∞—Ü–∞, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
    }}
    """
}

MAGIC_NUMBERS = {
    "RELEVANCE_THRESHOLD": 7,
    "DESCRIPTION_MAX_LEN": 1000,  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–∑
    "CONCURRENCY_LIMIT": 1,  # –í–µ—Ä–Ω—É–ª–∏ 5 –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏
    "PROCESS_INTERVAL": 5,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    "DEBUG_MODE": True,  # –í–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    "SCREENSHOT_DIR": "./screenshots",  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    "PAGE_TIMEOUT": 150  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
}

CONFIG = {
    "resume_id": RESUME_ID,
    "user_wishes": USER_WISHES,
    "prompts": PROMPTS,
    "magic_numbers": MAGIC_NUMBERS,
    "test_config": TEST_CONFIG,
    "system_prompt": "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø–∏—Å—å–º–∞–º. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON.",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "model_name": "command-a-03-2025",
    "provider_name": "CohereForAI_C4AI_Command",
    "disclaimer_template": '\n\n–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ë–æ–ª—å—à–æ–π –Ø–∑—ã–∫–æ–≤–æ–π –ú–æ–¥–µ–ª–∏ "{model_name}" –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ "{provider_name}" –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–±–ª–∏–æ—Ç–µ–∫—É g4f. –≠—Ç–∞ –∂–µ –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–µ–∑—é–º–µ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è. –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ hh.ru –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ https://github.com/TryDotAtwo/AutoHHKek',
    "progress_desc": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π",
    "progress_unit": "vac",
    "launch_msg": "üöÄ –ó–∞–ø—É—Å–∫ {index}/{total}: {title}...",
    "complete_msg": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {title}: {status}",
    "test_login_msg": "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—å login...",
    "test_resume_msg": "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—å resume_parser (ID: {resume_id})...",
    "test_vacancy_search_msg": "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—å vacancy_parser (ID: {resume_id})...",
    "test_llm_msg": "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—å llm_handler...",
    "test_vacancy_handler_msg": "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—å vacancy_handler –¥–ª—è '{title}' (ID —Ä–µ–∑—é–º–µ: {resume_id})...",
    "login_success": "‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω! Context —Å–æ–∑–¥–∞–Ω.",
    "resume_parsed": "‚úÖ –†–µ–∑—é–º–µ —Å–ø–∞—Ä—Å–µ–Ω–æ: {profile}...",
    "vacancies_found": "‚úÖ –ù–∞–π–¥–µ–Ω–æ {count} –≤–∞–∫–∞–Ω—Å–∏–π (–≤—Å–µ–≥–æ {total}). –ü—Ä–∏–º–µ—Ä: {example}",
    "llm_success": "‚úÖ LLM –æ—Ç–≤–µ—Ç: {response}",
    "llm_result": "   - –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}",
    "llm_model": "   - –ú–æ–¥–µ–ª—å: {model}, –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}",
    "vacancy_handler_result": "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}",
    "no_vacancies": "–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
    "stats_msg": "üìä –ù–∞–π–¥–µ–Ω–æ {count} –≤–∞–∫–∞–Ω—Å–∏–π (–∏–∑ {total}). Concurrency: {concurrency}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫",
    "progress_update": "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}/{total} (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})",
    "task_error": "üí• –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {error}",
    "total_success": "üéØ –ò—Ç–æ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ —Å –ø–∏—Å—å–º–æ–º: {success}/{total}",
    "profile_preview_len": 200,
    "title_preview_len": 50,
    "random_delay_prob": 0.5,
    "random_delay_min": 1,
    "random_delay_add": 1
}

async def create_page_with_auto_close(context: BrowserContext, user_agent: str) -> Tuple[Page, asyncio.Task]:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ—Ä–µ–∑ PAGE_TIMEOUT —Å–µ–∫—É–Ω–¥."""
    page = await context.new_page()
    await page.set_extra_http_headers({"User-Agent": user_agent})
    
    async def auto_closer():
        await asyncio.sleep(CONFIG["magic_numbers"]["PAGE_TIMEOUT"])
        try:
            await page.close()
            print(f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ {CONFIG['magic_numbers']['PAGE_TIMEOUT']} —Å–µ–∫.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    
    closer_task = asyncio.create_task(auto_closer())
    return page, closer_task

async def test_login():
    """–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—è login: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –ª–æ–≥–∏–Ω (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)."""
    print(CONFIG["test_login_msg"])
    async with async_playwright() as p:
        context = await setup_browser_and_login(p)
        print(CONFIG["login_success"])
        await context.close()

async def test_resume_parser(resume_id: str = CONFIG["resume_id"]):
    """–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—è resume_parser: –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ (–ª–æ–≥–∏–Ω + –ø–∞—Ä—Å–∏–Ω–≥, –±–µ–∑ –¥—Ä—É–≥–∏—Ö)."""
    print(CONFIG["test_resume_msg"].format(resume_id=resume_id))
    async with async_playwright() as p:
        context = await setup_browser_and_login(p)
        stealth = Stealth()
        await stealth.apply_stealth_async(context)
        page, closer_task = await create_page_with_auto_close(context, CONFIG["user_agent"])
        try:
            profile = await parse_resume(page, resume_id, CONFIG["user_wishes"])
            preview = profile[:CONFIG["profile_preview_len"]] + "..." if len(profile) > CONFIG["profile_preview_len"] else profile
            print(CONFIG["resume_parsed"].format(profile=preview))
        finally:
            closer_task.cancel()
            try:
                await page.close()
            except:
                pass
            await context.close()

async def test_vacancy_search(resume_id: str = CONFIG["resume_id"]):
    """–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—è vacancy_parser: –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π (–ª–æ–≥–∏–Ω + –ø–æ–∏—Å–∫, –±–µ–∑ –¥—Ä—É–≥–∏—Ö)."""
    print(CONFIG["test_vacancy_search_msg"].format(resume_id=resume_id))
    async with async_playwright() as p:
        context = await setup_browser_and_login(p)
        stealth = Stealth()
        await stealth.apply_stealth_async(context)
        page, closer_task = await create_page_with_auto_close(context, CONFIG["user_agent"])
        try:
            vacancies, total = await search_vacancies(page, resume_id)
            example = vacancies[0]['title'] if vacancies else '–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π'
            print(CONFIG["vacancies_found"].format(count=len(vacancies), total=total, example=example))
        finally:
            closer_task.cancel()
            try:
                await page.close()
            except:
                pass
            await context.close()

async def test_llm_handler():
    """–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—è llm_handler: –∑–∞–ø—Ä–æ—Å –∫ LLM (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞, —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)."""
    print(CONFIG["test_llm_msg"])
    user_prompt = CONFIG["prompts"]["process"].format(
        profile=CONFIG["test_config"]["test_profile"],
        user_wishes=CONFIG["user_wishes"],
        title=CONFIG["test_config"]["test_vacancy_title"],
        description=CONFIG["test_config"]["test_vacancy_description"]
    )
    response = await robust_llm_query(CONFIG["system_prompt"], user_prompt)
    print(CONFIG["llm_success"].format(response=response))
    if isinstance(response, tuple) and len(response) == 3:
        print(CONFIG["llm_result"].format(result=response[0]))
        print(CONFIG["llm_model"].format(model=response[1], provider=response[2]))

async def test_vacancy_handler(vacancy_url: str = CONFIG["test_config"]["test_vacancy_url"], 
                               vacancy_title: str = CONFIG["test_config"]["test_vacancy_title"], 
                               resume_id: str = CONFIG["resume_id"]):
    """–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—è vacancy_handler: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ (–ª–æ–≥–∏–Ω + process_vacancy, —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)."""
    print(CONFIG["test_vacancy_handler_msg"].format(title=vacancy_title, resume_id=resume_id))
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ (–¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫–ª–∏–∫–æ–≤, –±–µ–∑ LLM)
    FIXED_LETTER_TEXT = CONFIG["test_config"]["test_letter_text"]
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ relevance –∏ decision –¥–ª—è —Ç–µ—Å—Ç–∞ (–î–∞, score 8)
    FIXED_RELEVANCE_SCORE = CONFIG["test_config"]["test_relevance_score"]
    FIXED_APPLY_DECISION = CONFIG["test_config"]["test_apply_decision"]
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM –≤–Ω—É—Ç—Ä–∏ process_vacancy (–Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º letter –Ω–∞–ø—Ä—è–º—É—é, —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç LLM —Å–∞–º–∞)
    async with async_playwright() as p:
        context = await setup_browser_and_login(p)
        stealth = Stealth()
        await stealth.apply_stealth_async(context)
        vacancy = {"title": vacancy_title, "url": vacancy_url}
        # –í—ã–∑–æ–≤ process_vacancy —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä—ã (LLM —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö profile/wishes/prompts)
        result = await process_vacancy(
            vacancy, context, 
            CONFIG["test_config"]["test_profile"],  # user_profile
            CONFIG["user_wishes"],  # user_wishes
            CONFIG["prompts"],  # prompts (dict, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ string indices)
            CONFIG["magic_numbers"]["RELEVANCE_THRESHOLD"],  # relevance_threshold
            CONFIG["magic_numbers"]["DEBUG_MODE"]  # debug_mode
        )
        print(CONFIG["vacancy_handler_result"].format(result=result))
        await context.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)."""
    async with async_playwright() as p:
        # –®–∞–≥ 1: –õ–æ–≥–∏–Ω (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–æ–¥—É–ª—å)
        context = await setup_browser_and_login(p)
        stealth = Stealth()
        await stealth.apply_stealth_async(context)
        
        # –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–æ–¥—É–ª—å)
        page, closer_task_resume = await create_page_with_auto_close(context, CONFIG["user_agent"])
        try:
            global USER_PROFILE
            USER_PROFILE = await parse_resume(page, CONFIG["resume_id"], CONFIG["user_wishes"])
        finally:
            closer_task_resume.cancel()
            try:
                await page.close()
            except:
                pass
        
        # –®–∞–≥ 3: –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–æ–¥—É–ª—å)
        page, closer_task_search = await create_page_with_auto_close(context, CONFIG["user_agent"])
        try:
            vacancies, total_count = await search_vacancies(page, CONFIG["resume_id"])
        finally:
            closer_task_search.cancel()
            try:
                await page.close()
            except:
                pass
        
        if not vacancies:
            print(CONFIG["no_vacancies"])
            await context.close()
            return

        concurrency = CONFIG["magic_numbers"]["CONCURRENCY_LIMIT"]
        interval = CONFIG["magic_numbers"]["PROCESS_INTERVAL"]
        debug_mode = CONFIG["magic_numbers"]["DEBUG_MODE"]
        print(CONFIG["stats_msg"].format(
            count=len(vacancies), total=total_count, 
            concurrency=concurrency, interval=interval
        ))

        # –°–µ–º—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è concurrency
        semaphore = asyncio.Semaphore(concurrency)
        progress_lock = asyncio.Lock()

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = tqdm(total=len(vacancies), desc=CONFIG["progress_desc"], unit=CONFIG["progress_unit"])

        async def bounded_process(vac, index: int):
            """–û–±—ë—Ä—Ç–∫–∞: print –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–¥ —Å–µ–º–∞—Ñ–æ—Ä–æ–º (—á—Ç–æ–±—ã –ø—Ä–∏–Ω—Ç—ã —à–ª–∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ)."""
            title_preview = vac['title'][:CONFIG["title_preview_len"]] + "..." if len(vac['title']) > CONFIG["title_preview_len"] else vac['title']
            print(CONFIG["launch_msg"].format(index=index+1, total=len(vacancies), title=title_preview))
            async with semaphore:
                # –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                if random.random() > CONFIG["random_delay_prob"]:
                    await asyncio.sleep(CONFIG["random_delay_min"] + random.random() * CONFIG["random_delay_add"])
                
                # –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ (LLM, –ø–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–∫–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ vacancy_handler)
                result = await process_vacancy(
                    vac, context, 
                    USER_PROFILE,  # user_profile
                    CONFIG["user_wishes"],  # user_wishes
                    CONFIG["prompts"],  # prompts (dict)
                    CONFIG["magic_numbers"]["RELEVANCE_THRESHOLD"],  # relevance_threshold
                    debug_mode  # debug_mode
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
                async with progress_lock:
                    progress_bar.update(1)
                    remaining = progress_bar.total - progress_bar.n
                    progress_bar.set_description(CONFIG["progress_update"].format(
                        processed=progress_bar.n, total=progress_bar.total, remaining=remaining
                    ))
                title_preview = result['title'][:CONFIG["title_preview_len"]] + "..." if len(result['title']) > CONFIG["title_preview_len"] else result['title']
                print(CONFIG["complete_msg"].format(title=title_preview, status=result['status']))
                return result

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è parallelism —Å–µ–º–∞—Ñ–æ—Ä–æ–º
        tasks = []
        for i, vac in enumerate(vacancies):
            task = asyncio.create_task(bounded_process(vac, i))
            tasks.append(task)
            if i < len(vacancies) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                await asyncio.sleep(interval)

        results = await asyncio.gather(*tasks, return_exceptions=True)
        progress_bar.close()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        for result in results:
            if isinstance(result, Exception):
                print(CONFIG["task_error"].format(error=result))

        # –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        successful = sum(1 for r in results if not isinstance(r, Exception) and r.get('status') == 'letter_sent')
        print(CONFIG["total_success"].format(success=successful, total=len(vacancies)))

        await context.close()

async def get_vacancy_description(context: BrowserContext, vac: Dict[str, str]) -> str:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ (–∏–∑ vacancy_handler, –Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ main –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏)."""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤)
    return "–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞)."

if __name__ == "__main__":
    # === –¢–ï–°–¢–´ –ú–û–î–£–õ–ï–ô (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–π –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª) ===
    
    # –¢–µ—Å—Ç login (–ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏–Ω)
    # asyncio.run(test_login())
    
    # –¢–µ—Å—Ç resume_parser (–ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ –ø–æ RESUME_ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    # asyncio.run(test_resume_parser())
    
    # –¢–µ—Å—Ç vacancy_search (–ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ RESUME_ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    # asyncio.run(test_vacancy_search())
    
    # –¢–µ—Å—Ç llm_handler (–∑–∞–ø—Ä–æ—Å –∫ LLM —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    # asyncio.run(test_llm_handler())
    
    # –¢–µ—Å—Ç vacancy_handler (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏: URL –∏ title –∏–∑ –ø—Ä–∏–º–µ—Ä–∞, —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∏—Å—å–º–æ–º)
    # asyncio.run(test_vacancy_handler())

    # –ü–æ–ª–Ω—ã–π main (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã)
    asyncio.run(main())
